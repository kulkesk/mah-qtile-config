from libqtile.config import Click, Drag, Group, Key
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from libqtile.core.manager import Qtile

mod = "mod4"
terminal = guess_terminal("alacritty")

# bar_state = 0

@lazy.function
def bar_toggle_visibility(qtile:Qtile):
    qtile.cmd_hide_show_bar("bottom")
    qtile.cmd_reconfigure_screens()
#     global bar_state
#     match bar_state:
#         case 0:
#             qtile.cmd_hide_show_bar("bottom")
#         case 1:
#             qtile.cmd_hide_show_bar("top")
#     bar_state = (bar_state + 1) % 2


keys = [
    # Switch between windows
    Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "j", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.layout.next(),
        desc="Move window focus to other window"),

    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),

    # Grow windows. If current window is on the edge of screen and direction
    # will be to screen edge - window would shrink.
    Key([mod, "control"], "h", lazy.layout.grow_left(),
        desc="Grow window to the left"),
    Key([mod, "control"], "l", lazy.layout.grow_right(),
        desc="Grow window to the right"),
    Key([mod, "control"], "j", lazy.layout.grow_down(),
        desc="Grow window down"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "x", lazy.window.kill(), desc="Kill focused window"),

    Key([mod, "control"], "r", lazy.restart(), desc="Restart Qtile"),
    # Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    # Key([mod, "control"], "q", plasma_turnoff(), desc="Shutdown Qtile"),
    Key([mod], "r", lazy.spawncmd(),
        desc="Spawn a command using a prompt widget"),


    Key([mod, "shift"], "r", lazy.spawn("rofi -show drun -modi drun"),
        desc="launch rofi"),
    Key([], 'Print', lazy.spawn("flameshot gui"), desc="make screenshot"),
    # Key([mod,], "m", lazy.spawn('sflock -b "[o-o]" -c "#"'), desc="lock the screen"),

    Key([mod, "shift"], "f", lazy.window.toggle_fullscreen(), desc="toggle fullscreen for focused window"),
    Key([mod], "f", bar_toggle_visibility(), desc="toggle bar's visibility"),

    # media control
    Key([mod], "s", lazy.widget["mpris2"].play_pause(), desc="play/pause media"),
    Key([mod], "d", lazy.widget["mpris2"].next(), desc="next media"),
    Key([mod], "a", lazy.widget["mpris2"].previous(), desc="previous media"),

    Key([], "XF86AudioPlay", lazy.widget["mpris2"].play_pause(), desc="play/pause media"),
    Key([], "XF86AudioNext", lazy.widget["mpris2"].next(), desc="next media"),
    Key([], "XF86AudioPrev", lazy.widget["mpris2"].previous(), desc="previous media"),

    # volume control
    Key([mod], "e", lazy.widget["pulsevolume"].increase_vol(5), desc="increase volume"),
    Key([mod], "q", lazy.widget["pulsevolume"].decrease_vol(5), desc="decrease volume"),
    Key([mod, "shift"], "e", lazy.widget["pulsevolume"].increase_vol(1), desc="increase volume by one"),
    Key([mod, "shift"], "q", lazy.widget["pulsevolume"].decrease_vol(1), desc="decrease volume by one"),
    # Key([mod, "shift"], "q", lazy.widget["pulsevolume"].mute(), desc="mute"),

    Key([], "XF86AudioRaiseVolume", lazy.widget["pulsevolume"].increase_vol(5), desc="increase volume"),
    Key([], "XF86AudioLowerVolume", lazy.widget["pulsevolume"].decrease_vol(5), desc="decrease volume"),
    Key(["shift"], "XF86AudioRaiseVolume", lazy.widget["pulsevolume"].increase_vol(1), desc="increase volume by one"),
    Key(["shift"], "XF86AudioLowerVolume", lazy.widget["pulsevolume"].decrease_vol(1), desc="decrease volume by one"),
    Key([], "XF86AudioMute", lazy.widget["pulsevolume"].mute(), desc="mute"),
]
